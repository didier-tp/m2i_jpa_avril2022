package com.m2i.tp.appliSpringJpa.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.m2i.tp.appliSpringJpa.entity.Employe;


/*
* Cette version du DAO sera utilisé par Spring+JPA
* et spring va initialiser automatiquement le entityManager
* grace à l'annotation @PersistenceContext.
*
* Spring va aussi déclencher automatiquement des commit/rollback
* si on place @Transactional sur la classe ou une méthode
* 
* NB: Cette classe utilise Spring sur la partie @Transactional et @PersistenceContext
* mais n'utilise volontairement pas l'extension spring-data-jpa pour ne pas cacher JPA
* 
*/
@Repository //cas particulier de @Component //pour prise en charge par framework spring
@Transactional //pour commit/rollback automatique
public class DaoEmployeJpaAvecSpringAncienneVersion implements DaoEmploye {
	
	//NB: @PersistenceContext permet d'initialiser l'objet technique
	//entityManager à partir d'une configuration
	// src/main/resources/META-INF/persistence.xml
	// ou bien config spring équivalente dans src/main/resources/application.properties
	@PersistenceContext
	private EntityManager entityManager;
	

	@Override
	public Employe findById(Integer id) {
		return entityManager.find(Employe.class, id);//.find() au sens .findByPrimaryKey()
	}

	@Override
	public List<Employe> findAll() {
		return entityManager.createQuery("SELECT e FROM Employe e",Employe.class)
				.getResultList();
	}

	@Override
	public Employe insert(Employe emp) {
			//en entrée , emp est un nouvel objet employé avec .empId à null (encore inconnu)
			//déclenche automatiquement INSERT INTO Employe(firstname, ....) VALUES(emp.getFirstname() , ....)
			entityManager.persist(emp); //INSERT INTO SQL avec aut_incr
		return emp;//avec .empId auto incrémenté
	}

	@Override
	public void update(Employe emp) {
			entityManager.merge(emp); //UPDATE SQL
	}

	@Override
	public void deleteById(Integer id) {
			Employe empAsupprimer = entityManager.find(Employe.class, id);
			entityManager.remove(empAsupprimer);
			//déclenche automatiquement DELETE FROM Employe WHERE idEmp=code
	}

}
